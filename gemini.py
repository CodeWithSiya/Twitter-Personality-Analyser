import os
import json
from dotenv import load_dotenv
import google.generativeai as genai
from google.cloud import  language_v1
from google.oauth2 import service_account
from prompts import PERSONALITY_ANALYSIS_PROMPT

"""
Gemini Generative AI API Authentication and Configuration.

The program includes functionality for:
1. Loading API credentials.
2. Authenticating with Google Cloud services.
3. Analysing tweets using the Google Cloud Language API.
4. Generating personality reports based using the Gemini Generative AI Model.

Author: Siyabonga Madondo
Version: 16/07/2024
"""

def load_credentials() -> dict:
    """
    Load Twitter API credentials from the .env file.

    Returns:
        A dictionary containing loaded credentials.
    """
    load_dotenv()
    return {
        "GOOGLE_API_KEY": os.getenv("GOOGLE_API_KEY"),
        "GOOGLE_APPLICATION_CREDENTIALS": os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
    }

def load_tweets(filename : str) -> list:
    """
    Load tweets from a JSON file.

    :param: filename: Name of the JSON file containing tweets.

    Returns:
        List of dictionaries containing tweets with various metadata.
    """
    with (open(filename, "r", encoding = "utf-8")) as file:
        tweets_data = json.load(file)
    tweets = [tweet for tweet in tweets_data]
    return tweets

def authenticate_with_service_account():
    """
    Authenticate with Google Cloud using service account credentials.

    Returns:
        Authenticated client instance for Google Cloud Language API.
    """
    # Load the service account file path from credentials.
    SERVICE_ACCOUNT_FILE = load_credentials()["GOOGLE_APPLICATION_CREDENTIALS"]

    # Create credentials from the service account file.
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE,
        scopes=["https://www.googleapis.com/auth/cloud-language"]
    )
 
    # Initialise the LanguageServiceClient using the credentials.
    client = language_v1.LanguageServiceClient(credentials = credentials)

    return client
    

def analyse_tweets(client: language_v1.LanguageServiceClient, tweets: list) -> dict:
    """
    Analyze tweets using Google Cloud Language API (Gemini AI).

    :param tweets: List of dictionaries containing tweet attributes.

    Returns:
        Dictionary containing analysis results.
    """
    # Prepare text input for analysis by extracting the text from the tweets provided.
    text = [tweet["text"] for tweet in tweets]

    # Performing analysis using the client.
    document = language_v1.Document(content=" ".join(text), type_=language_v1.Document.Type.PLAIN_TEXT)
    sentiment = client.analyze_sentiment(request={'document': document}).document_sentiment
    entities = client.analyze_entities(request={'document': document}).entities
    syntax = client.analyze_syntax(request={'document': document}).tokens
    tweet_times = [tweet["created_at"] for tweet in tweets]
    retweet_counts = [tweet["retweet_count"] for tweet in tweets]
    favorite_counts = [tweet["favorite_count"] for tweet in tweets]

    return {
        "sentiment": sentiment,
        "entities": entities,
        "syntax": syntax,
        "tweet_times": tweet_times,
        "retweet_counts": retweet_counts,
        "favorite_counts": favorite_counts      
    }

def configure_model() -> genai.GenerativeModel:
    """
    Initialize and configure the Gemini Generative AI model.

    Returns:
        The initialized model.
    """
    credentials = load_credentials()
    genai.configure(api_key = credentials["GOOGLE_API_KEY"])
    return genai.GenerativeModel('gemini-1.5-flash')

def generate_personality_report(tweets: list) -> str:
    """
    Generate a short verbal report using Gemini prompt API based on analyzed tweets.

    :param tweets: List of dictionaries containing tweet attributes.

    Returns:
        Short verbal report generated by Gemini.
    """
    # Authenticate with Google Cloud.
    client = authenticate_with_service_account()

    # Analyse tweets using Google Language API.
    analysis_results = analyse_tweets(client, tweets)

    # Prepare the prompt for the Gemini API.
    prompt = PERSONALITY_ANALYSIS_PROMPT

    # Compile the analysis results into a report format.
    report = f"Sentiment Score: {analysis_results['sentiment'].score}\n"
    report += f"Entities: {[entity.name for entity in analysis_results['entities']]}\n"
    report += f"Syntax Tokens: {len(analysis_results['syntax'])}"
    report += f"Tweet Times: {analysis_results['tweet_times']}\n"
    report += f"Retweet Counts: {analysis_results['retweet_counts']}\n"
    report += f"Favorite Counts: {analysis_results['favorite_counts']}"

    # Use Gemini to generate a verbal report.
    model = configure_model()
    response = model.generate_content(prompt.format(analysis_data = report))

    return response.text